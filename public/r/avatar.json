{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "avatar",
  "type": "registry:component",
  "author": "anhnd13",
  "dependencies": [
    "ng-zorro-antd"
  ],
  "registryDependencies": [
    "button",
    "svg-inline"
  ],
  "files": [
    {
      "path": "src/app/shared/components/base/avatar/avatar.component.ts",
      "content": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  inject,\r\n} from '@angular/core';\r\nimport { ButtonComponent } from '@components/base/button/button.component';\r\nimport { SvgInlineComponent } from '@components/base/svg-inline/svg-inline.component';\r\nimport {\r\n  AvatarSize,\r\n  AvatarStyle,\r\n  AvatarType,\r\n  ButtonColor,\r\n  RankingType,\r\n} from '@enums/ui.enum';\r\nimport { ShortenNamePipe } from '@pipes/shortenName/shorten-name.pipe';\r\nimport { UI } from '@services/ui/ui.service';\r\n\r\nfunction toAvatarSize(value: string): AvatarSize {\r\n  const sizeKey = Object.keys(AvatarSize).find(\r\n    (key) => AvatarSize[key as keyof typeof AvatarSize] === value\r\n  );\r\n  return sizeKey\r\n    ? AvatarSize[sizeKey as keyof typeof AvatarSize]\r\n    : AvatarSize.Md;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-avatar, [app-avatar]',\r\n  standalone: true,\r\n  imports: [CommonModule, SvgInlineComponent, ShortenNamePipe, ButtonComponent],\r\n  templateUrl: './avatar.component.html',\r\n  styleUrls: ['./avatar.component.scss'],\r\n})\r\nexport class AvatarComponent {\r\n  @Input() rank: RankingType = RankingType.None;\r\n  @Input({ transform: toAvatarSize }) size: AvatarSize = AvatarSize.Md;\r\n  @Input() type: AvatarType = AvatarType.Icon;\r\n  @Input() content: string = 'media/default/avatar.svg';\r\n  @Input() round: boolean = false;\r\n  @Input() style: AvatarStyle = AvatarStyle.Bank;\r\n  @Input() changeColorIcon: boolean = false;\r\n  @Input() enableChange: boolean = false;\r\n  @Input() iconChange: string = 'media/icons/doutone/edit.svg';\r\n  @Input() iconChange2Color: boolean = true;\r\n  @Input() btnChangeColor: ButtonColor = ButtonColor.Primary;\r\n  @Input() active: boolean = false;\r\n\r\n  @Output() changeAvt = new EventEmitter();\r\n\r\n  @HostBinding('class') get hostClass() {\r\n    return this.initClass();\r\n  }\r\n\r\n  SIZE_ICON_CONTENT = {\r\n    bank: {\r\n      xs: 4,\r\n      sm: 6,\r\n      md: 8,\r\n      midMd: 8,\r\n      lg: 12,\r\n      xxl: 14,\r\n    },\r\n    light: {\r\n      xs: 4,\r\n      sm: 4,\r\n      md: 5,\r\n      midMd: 5,\r\n      lg: 8,\r\n      xxl: 10,\r\n    },\r\n  };\r\n\r\n  SIZE_ICON_BTN = {\r\n    xs: 1,\r\n    sm: 2,\r\n    md: 2,\r\n    midMd: 2,\r\n    lg: 3,\r\n    xxl: 4,\r\n  };\r\n\r\n  initClass() {\r\n    let classs = ['app-avt'];\r\n    classs.push('app-avt-' + this.type);\r\n    if (this.size !== AvatarSize.Md) classs.push('app-avt-' + this.size);\r\n    if (this.rank !== RankingType.None) classs.push('rank-' + this.rank);\r\n    if (this.round) classs.push('rounded');\r\n    if (this.active) classs.push('app-avt-active');\r\n    classs.push('bg-' + this.style);\r\n    return classs.join(' ');\r\n  }\r\n\r\n  readonly UI = inject(UI);\r\n\r\n  handleChangeAvt() {\r\n    this.changeAvt.emit();\r\n  }\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "src/app/shared/components/base/avatar/avatar.component.html",
      "content": "<div [ngClass]=\"{ wrapper: true, 'wrapper-change-photo': enableChange }\">\r\n  <ng-container [ngSwitch]=\"type\">\r\n    <img\r\n      *ngSwitchCase=\"'image'\"\r\n      alt=\"avatar\"\r\n      [src]=\"content\"\r\n      class=\"avt\"\r\n      [alt]=\"content\"\r\n    />\r\n    <ng-container *ngSwitchCase=\"'icon'\">\r\n      <app-svg\r\n        *ngIf=\"style === 'light'\"\r\n        [src]=\"content\"\r\n        [size]=\"SIZE_ICON_CONTENT[style][size]\"\r\n        [colorChange]=\"changeColorIcon\"\r\n      />\r\n      <img\r\n        *ngIf=\"style === 'bank'\"\r\n        [src]=\"content\"\r\n        [class]=\"'size-' + SIZE_ICON_CONTENT[style][size]\"\r\n        alt=\"img-{{ content }}\"\r\n      />\r\n    </ng-container>\r\n    <div *ngSwitchCase=\"'text'\" class=\"title\">\r\n      {{ content | shortenName }}\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n@if(enableChange) {\r\n<button\r\n  class=\"change-box\"\r\n  type=\"button\"\r\n  aria-label=\"button change avt\"\r\n  [shape]=\"UI.ButtonShape.Circle\"\r\n  app-button\r\n  [iconOnly]=\"true\"\r\n  [color]=\"btnChangeColor\"\r\n  [iconSize]=\"SIZE_ICON_BTN[size]\"\r\n  [prefixIcon]=\"iconChange\"\r\n  [iconColorChange]=\"iconChange2Color\"\r\n  (click)=\"handleChangeAvt()\"\r\n></button>\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "src/app/shared/components/base/avatar/avatar.component.scss",
      "content": "$rankStyle: (\"silver\", var(--rank-bg-silver), var(--rank-color-silver)),\r\n  (\"gold\", var(--rank-bg-gold), var(--rank-color-gold)),\r\n  (\"platinum\", var(--rank-bg-platinum), var(--rank-color-platinum)),\r\n  (\"titanium\", var(--rank-bg-titanium), var(--rank-color-titanium));\r\n\r\n// $name, $size, $paddingRound, $sizeText, $pdBtnChangeAvt\r\n$sizeAvts: (\"\", 40px, 8px, 16px, 2px), (\"-xs\", 24px, 2px, 14px, 2px),\r\n  (\"-sm\", 32px, 8px, 14px, 2px), (\"-midMd\", 48px, 8px, 16px, 2px),\r\n  (\"-lg\", 64px, 12px, 24px, 2px), (\"-xxl\", 84px, 12px, 24px, 2px);\r\n\r\n:host {\r\n  @each $name, $bg, $colorText in $rankStyle {\r\n    &.rank-#{$name} {\r\n      background-image: linear-gradient(135deg, $bg);\r\n      padding: 2px;\r\n\r\n      .title {\r\n        color: $colorText;\r\n      }\r\n    }\r\n  }\r\n\r\n  @each $name, $size, $pd, $sizeText, $pdBtnChangeAvt in $sizeAvts {\r\n    &.app-avt#{$name} {\r\n      width: $size;\r\n      min-width: $size;\r\n      height: $size;\r\n\r\n      &.rounded .wrapper {\r\n        padding: $pd;\r\n      }\r\n\r\n      .title {\r\n        font-size: $sizeText;\r\n      }\r\n\r\n      .change-box {\r\n        padding: $pdBtnChangeAvt !important;\r\n      }\r\n    }\r\n  }\r\n\r\n  &.app-avt {\r\n    @apply flex relative z-[1] rounded-circle;\r\n\r\n    &-text .wrapper {\r\n      padding: 4px;\r\n    }\r\n\r\n    &-active .wrapper {\r\n      box-shadow: inset 0 0 0 1px var(--primary);\r\n    }\r\n\r\n    &.bg {\r\n      &-light .wrapper {\r\n        // @apply bg-sub-primary;\r\n      }\r\n      &-bank .wrapper {\r\n        // @apply bg-grey-lighter;\r\n      }\r\n    }\r\n\r\n    .wrapper {\r\n      @apply overflow-hidden flex items-center justify-center rounded-circle flex-auto;\r\n      .title {\r\n        @apply overflow-hidden text-clip text-nowrap;\r\n      }\r\n      &-change-photo {\r\n        @apply cursor-pointer;\r\n        &:hover {\r\n          @apply border;\r\n          box-shadow: 0 0 0 3px var(--primary-lighter);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.change-box {\r\n  @apply absolute bottom-0 right-0;\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}