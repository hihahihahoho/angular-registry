{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "textarea",
  "type": "registry:component",
  "author": "anhnd13",
  "dependencies": [
    "ng-zorro-antd"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/app/shared/components/base/textarea/textarea.component.ts",
      "content": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  TemplateRef,\r\n  forwardRef,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\r\nimport { ButtonComponent } from '@components/base/button/button.component';\r\nimport { SvgInlineComponent } from '@components/base/svg-inline/svg-inline.component';\r\nimport { ValidateErrorComponent } from '@components/base/validate-error/validate-error.component';\r\nimport { BaseCVADirective } from '@directives/base-cva/base-cva.directive';\r\nimport { Direction, InputSize } from '@enums/ui.enum';\r\nimport { NzInputModule } from 'ng-zorro-antd/input';\r\nimport { NzToolTipModule } from 'ng-zorro-antd/tooltip';\r\n\r\n@Component({\r\n  selector: 'app-textarea',\r\n  standalone: true,\r\n  templateUrl: './textarea.component.html',\r\n  styleUrls: ['../input/input.component.scss', './textarea.component.scss'],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ValidateErrorComponent,\r\n    SvgInlineComponent,\r\n    ButtonComponent,\r\n    NzInputModule,\r\n    NzToolTipModule,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => TextareaComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class TextareaComponent<T> extends BaseCVADirective<T> {\r\n  @Input() maxRows: number = 10;\r\n  @Input() label?: string | TemplateRef<T>;\r\n  @Input() direction: Direction = Direction.Horizontal;\r\n  @Input() id: string =\r\n    'textarea' +\r\n    Math.random().toString(22).substring(2) +\r\n    new Date().getTime().toString(22);\r\n  @Input() size: InputSize = InputSize.Large;\r\n  @Input() clear: boolean = true;\r\n  @Input() placeholder: string = 'Enter content';\r\n  @Input() class?: string;\r\n  @Input() autocomplete: 'on' | 'off' = 'off';\r\n  @Input() errorMessages?: Record<string, string>;\r\n  @Input() counter: number = 0;\r\n  @Input() nzAutocomplete!: any;\r\n  @Input() prefix?: TemplateRef<void> | null;\r\n  @Input() suffix?: TemplateRef<void> | null;\r\n  @Input() tooltipTpl?: TemplateRef<void> | null;\r\n  @Input() tooltipIcon: string = 'media/icons/outline/alert-information.svg';\r\n  @Input() showTooltip: boolean = false;\r\n  @Input() showRequired: boolean = false;\r\n  @Input() hint?: string;\r\n  @Input() hintIcon: string = 'media/icons/solid/alert-information.svg';\r\n  @Input() showHintIcon: boolean = false;\r\n\r\n  @HostBinding('class') get hostClass() {\r\n    return this.initClass();\r\n  }\r\n\r\n  initClass() {\r\n    let classs = ['app-textarea', 'w-full', this.direction.toString()];\r\n    if (this.size !== InputSize.Medium) classs.push(this.size);\r\n    return classs.join(' ');\r\n  }\r\n\r\n  isShowClearBtn() {\r\n    return (\r\n      this.clear &&\r\n      this.control?.value &&\r\n      !this.control?.disabled &&\r\n      this.control.dirty\r\n    );\r\n  }\r\n\r\n  clearFn(e: any) {\r\n    this.control?.setValue(null);\r\n  }\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "src/app/shared/components/base/textarea/textarea.component.html",
      "content": "<ng-template #prefixTpl>\r\n  <div class=\"input-prefix\">\r\n    <div class=\"wrapper\">\r\n      <ng-container [ngTemplateOutlet]=\"prefix || null\" />\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #suffixTpl>\r\n  <div class=\"input-suffix\">\r\n    <div class=\"wrapper\">\r\n      @if(isShowClearBtn()) {\r\n      <a\r\n        app-button\r\n        [mute]=\"true\"\r\n        class=\"clear-icon\"\r\n        [iconOnly]=\"true\"\r\n        (click)=\"clearFn($event)\"\r\n        [iconColorChange]=\"false\"\r\n        [size]=\"'lg'\"\r\n        [prefixIcon]=\"'media/icons/solid/cancel.svg'\"\r\n      ></a>\r\n      }\r\n      <ng-container [ngTemplateOutlet]=\"suffix || null\" />\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n@if(label) {\r\n<div\r\n  [ngClass]=\"{\r\n    label: true,\r\n    required: required && showRequired\r\n  }\"\r\n>\r\n  <ng-template #tooltipDefaultTpl>\r\n    <div class=\"body-medium-thick mb-1\">This is a tooltip</div>\r\n    <div class=\"body-medium-thin\">\r\n      Tooltips are used to describe or identify an element. In most scenarios,\r\n      tooltips help the user understand the meaning, function or alt-text of an\r\n      element.\r\n    </div>\r\n  </ng-template>\r\n  <label class=\"label-inner\" [for]=\"id\">\r\n    {{ label }}\r\n    @if(showTooltip) {\r\n    <app-svg\r\n      class=\"icon-tooltip\"\r\n      [extendClass]=\"'md:size-6'\"\r\n      [size]=\"5\"\r\n      [colorChange]=\"false\"\r\n      nz-tooltip\r\n      [nzTooltipTitle]=\"tooltipTpl || tooltipDefaultTpl\"\r\n      [src]=\"tooltipIcon\"\r\n    />\r\n    }\r\n  </label>\r\n</div>\r\n}\r\n<div class=\"app-root\">\r\n  <div\r\n    [class]=\"size !== 'default' ? ' input-wrapper-' + size : ' '\"\r\n    [ngClass]=\"{\r\n      'input-wrapper': true,\r\n      'input-wrapper-disabled': control.disabled\r\n    }\"\r\n  >\r\n    @if(prefix) {\r\n    <ng-container [ngTemplateOutlet]=\"prefixTpl\" />\r\n    }\r\n\r\n    <textarea\r\n      nz-input\r\n      [id]=\"id\"\r\n      [ngClass]=\"{\r\n        'input textarea': true,\r\n        disabled: control.disabled\r\n      }\"\r\n      [formControl]=\"control\"\r\n      [placeholder]=\"placeholder\"\r\n      [nzAutosize]=\"{ minRows: 1, maxRows: maxRows }\"\r\n      aria-label=\"text-area\"\r\n    ></textarea>\r\n\r\n    @if(suffix || isShowClearBtn()) {\r\n    <ng-container [ngTemplateOutlet]=\"suffixTpl\" />\r\n    }\r\n\r\n    <div class=\"frame\"></div>\r\n  </div>\r\n\r\n  @if((control.invalid && control.touched) || hint || counter) {\r\n  <div class=\"explain\">\r\n    @if(counter) {\r\n    <p class=\"input-counter\">\r\n      {{ control.value?.length ? (control.value?.length | number) : 0 }}/{{\r\n        counter | number\r\n      }}\r\n    </p>\r\n    }\r\n    <div class=\"error-hint\">\r\n      @if(hint && !(control.invalid && control.touched)) {\r\n      <div class=\"hint\">\r\n        @if(showHintIcon) {\r\n        <app-svg [size]=\"5\" class=\"hint-icon\" [src]=\"hintIcon\" />\r\n        }\r\n        <p>{{ hint }}</p>\r\n      </div>\r\n      } @if(control.invalid && control.touched) {\r\n      <app-validate-error\r\n        [errors]=\"control.errors\"\r\n        [errorMessages]=\"errorMessages\"\r\n      />\r\n      }\r\n    </div>\r\n  </div>\r\n  }\r\n</div>\r\n",
      "type": "registry:component"
    },
    {
      "path": "src/app/shared/components/base/textarea/textarea.component.scss",
      "content": "//name, wraperRadius, height, py, px, btnSize\r\n$InputSizeConfig: (\r\n    \"\",\r\n    var(--br-radius-input-md),\r\n    var(--height-textarea-md),\r\n    8px,\r\n    var(--px-input-md),\r\n    32px\r\n  ),\r\n  (\r\n    \"-small\",\r\n    var(--br-radius-input-sm),\r\n    var(--height-textarea-sm),\r\n    4px,\r\n    var(--px-input-sm),\r\n    28px\r\n  ),\r\n  (\r\n    \"-large\",\r\n    var(--br-radius-input-lg),\r\n    var(--height-textarea-lg),\r\n    12px,\r\n    var(--px-input-lg),\r\n    var(--height-input-md)\r\n  );\r\n\r\ntextarea::-webkit-scrollbar {\r\n  width: 4px;\r\n}\r\n\r\n.input {\r\n  grid-row: 1;\r\n  resize: none;\r\n\r\n  &:placeholder-shown {\r\n    height: auto !important;\r\n  }\r\n\r\n  &-prefix,\r\n  &-suffix {\r\n    grid-row: 1;\r\n    .wrapper {\r\n      @apply h-full;\r\n    }\r\n  }\r\n\r\n  &-prefix {\r\n    margin-left: var(--pxInput);\r\n  }\r\n\r\n  &-suffix {\r\n    margin-right: var(--pxInput);\r\n  }\r\n\r\n  &-counter {\r\n    @apply text-right m-0;\r\n  }\r\n\r\n  &-wrapper {\r\n    .frame {\r\n      grid-row: 1/3;\r\n    }\r\n\r\n    ::ng-deep {\r\n      .btn {\r\n        max-height: var(--height-input-sm);\r\n      }\r\n    }\r\n\r\n    @each $name, $wraperRadius, $height, $py, $px, $btnSize in $InputSizeConfig\r\n    {\r\n      &.input-wrapper#{$name} {\r\n        --pxInput: #{$px};\r\n        --pyInput: #{$py};\r\n        &,\r\n        .frame {\r\n          --frame-radius: #{$wraperRadius};\r\n        }\r\n\r\n        .input {\r\n          margin: var(--pyInput) 0;\r\n          min-height: calc($height - var(--pyInput) * 2) !important;\r\n          padding: 0 var(--pxInput);\r\n        }\r\n\r\n        ::ng-deep {\r\n          .btn:not(.clear-icon) {\r\n            max-height: $btnSize;\r\n            height: $btnSize;\r\n            min-width: $btnSize;\r\n\r\n            &.icon-only {\r\n              max-width: $btnSize;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.explain {\r\n  @apply flex flex-row-reverse gap-x-3 gap-y-1;\r\n\r\n  .error-hint {\r\n    @apply flex-1;\r\n  }\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}