{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "svg-inline",
  "type": "registry:component",
  "author": "anhnd13",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/app/shared/components/base/svg-inline/svg-inline.component.ts",
      "content": "import { CommonModule } from '@angular/common';\r\nimport { Component, HostBinding, Input, OnInit } from '@angular/core';\r\nimport { ImageFormatType } from '@enums/ui.enum';\r\nimport { InlineSVGModule } from 'ng-inline-svg-2';\r\n\r\ninterface IImageExtension {\r\n  imageName?: string;\r\n  imageType: ImageFormatType | null;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-svg',\r\n  standalone: true,\r\n  imports: [CommonModule, InlineSVGModule],\r\n  templateUrl: './svg-inline.component.html',\r\n  styleUrls: ['./svg-inline.component.scss'],\r\n})\r\nexport class SvgInlineComponent implements OnInit {\r\n  @HostBinding('class.app-svg') inline = true;\r\n\r\n  @Input() src!: string;\r\n  @Input() color!: string;\r\n  @Input() size?: number = 6;\r\n  @Input() extendClass!: string;\r\n  @Input() colorChange: boolean = true;\r\n\r\n  initClass() {\r\n    let classs = ['icon-svg'];\r\n    let iconName =\r\n      'icon-svg-' + this.getNameAndTypeOfImage(this.src)?.imageName || '';\r\n    classs.push(iconName);\r\n    classs.push(this.initSizeAndExtendClass());\r\n    if (this.color) classs.push(this.color);\r\n    if (!this.colorChange) classs.push('no-change');\r\n    return classs.join(' ');\r\n  }\r\n\r\n  initSizeAndExtendClass(): string {\r\n    let classs = [];\r\n    if (this.size) classs.push('size-' + this.size);\r\n    if (this.extendClass) classs.push(this.extendClass);\r\n    return classs.join(' ');\r\n  }\r\n\r\n  imageType!: any;\r\n\r\n  ngOnInit(): void {\r\n    const imageExtension = this.getNameAndTypeOfImage(this.src);\r\n    this.imageType = imageExtension?.imageType;\r\n  }\r\n\r\n  private getNameAndTypeOfImage(src: string): IImageExtension {\r\n    const urlWithoutQuery = src.split('?')[0];\r\n    return {\r\n      imageName: urlWithoutQuery.split('/').pop()?.split('.')[0],\r\n      imageType: urlWithoutQuery\r\n        .split('/')\r\n        .pop()\r\n        ?.split('.')[1] as ImageFormatType,\r\n    };\r\n  }\r\n\r\n  onSVGLoaded(svg: SVGElement): SVGElement {\r\n    this.modifySvgIds(svg);\r\n    return svg;\r\n  }\r\n\r\n  private modifySvgIds(svg: SVGElement) {\r\n    const elementsWithId = svg.querySelectorAll('[id]');\r\n\r\n    elementsWithId.forEach((element: Element) => {\r\n      const originalId = element.id;\r\n      const uniqueId = `${originalId}-${Math.random().toString(36).substr(2, 9)}`;\r\n      element.setAttribute('id', uniqueId);\r\n\r\n      // Update references to this id within the SVG\r\n      this.updateReferences(svg, originalId, uniqueId);\r\n    });\r\n  }\r\n\r\n  private updateReferences(svg: SVGElement, originalId: string, uniqueId: string) {\r\n    // Iterate over all elements and check their attributes directly\r\n    const allElements = svg.getElementsByTagName('*');\r\n    for (let i = 0; i < allElements.length; i++) {\r\n      const element = allElements[i];\r\n      for (let j = 0; j < element.attributes.length; j++) {\r\n        const attr = element.attributes[j];\r\n        if (attr.value.includes(`#${originalId}`)) {\r\n          attr.value = attr.value.replace(`#${originalId}`, `#${uniqueId}`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "src/app/shared/components/base/svg-inline/svg-inline.component.html",
      "content": "@if (imageType === \"svg\") {\r\n  <div [class]=\"initClass()\" aria-label=\"icon svg\" [inlineSVG]=\"src\" [onSVGLoaded]=\"onSVGLoaded.bind(this)\"></div>\r\n} @else {\r\n  <img\r\n    [src]=\"src\"\r\n    alt=\"\"\r\n    [class]=\"initSizeAndExtendClass()\"\r\n    [ngClass]=\"{\r\n      'icon-svg': true,\r\n    }\"\r\n  />\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "src/app/shared/components/base/svg-inline/svg-inline.component.scss",
      "content": ":host.app-svg {\r\n  @apply inline-block;\r\n}\r\n::ng-deep {\r\n  .icon-svg {\r\n    @apply flex items-center justify-center;\r\n\r\n    svg {\r\n      @apply h-full w-full #{!important};\r\n    }\r\n\r\n    &:not(.no-change) {\r\n      svg {\r\n        [fill]:not([fill=\"none\"]) {\r\n          fill: currentColor;\r\n        }\r\n        [stroke] {\r\n          stroke: currentColor;\r\n        }\r\n        [stroke=\"#30CBFF\"] {\r\n          stroke: var(--icon-iconbrandsecondary);\r\n        }\r\n        [stroke=\"#1F1D83\"] {\r\n          stroke: var(--icon-iconbrandprimary);\r\n        }\r\n        [stroke=\"#97DC41\"] {\r\n          stroke: var(--icon-iconbrandtertiary);\r\n        }\r\n      }\r\n    }\r\n    svg {\r\n      [stop-color=\"#4960FF\"] {\r\n        stop-color: var(--brand-brandprimary60);\r\n      }\r\n      [stop-color=\"#1F1D83\"] {\r\n        stop-color: var(--brand-brandprimary100);\r\n      }\r\n      [stop-color=\"#97DC41\"] {\r\n        stop-color: var(--icon-iconbrandtertiary);\r\n      }\r\n      [stop-color=\"#2932FF\"] {\r\n        stop-color: var(--brand-brandprimary70);\r\n      }\r\n      [stop-color=\"#30CBFF\"] {\r\n        stop-color: var(--semantic-blue50);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}