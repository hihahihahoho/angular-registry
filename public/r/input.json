{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input",
  "type": "registry:component",
  "author": "anhnd13",
  "dependencies": [
    "ng-zorro-antd"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/app/shared/components/base/input/input.component.ts",
      "content": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n  forwardRef,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\r\nimport { ButtonComponent } from '@components/base/button/button.component';\r\nimport { SvgInlineComponent } from '@components/base/svg-inline/svg-inline.component';\r\nimport { ValidateErrorComponent } from '@components/base/validate-error/validate-error.component';\r\nimport { BaseCVADirective } from '@directives/base-cva/base-cva.directive';\r\nimport { Direction, InputShape, InputSize, InputType } from '@enums/ui.enum';\r\nimport { NzToolTipModule } from 'ng-zorro-antd/tooltip';\r\n\r\n@Component({\r\n  selector: 'app-input',\r\n  standalone: true,\r\n  templateUrl: './input.component.html',\r\n  styleUrls: ['./input.component.scss'],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ValidateErrorComponent,\r\n    SvgInlineComponent,\r\n    ButtonComponent,\r\n    NzToolTipModule,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InputComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class InputComponent<T> extends BaseCVADirective<T> {\r\n  @Input() maxRows: number = 10;\r\n  @Input() label?: string | TemplateRef<T>;\r\n  @Input() direction: Direction = Direction.Horizontal;\r\n  @Input() id: string =\r\n    'input' +\r\n    Math.random().toString(22).substring(2) +\r\n    new Date().getTime().toString(22);\r\n  @Input() size: InputSize = InputSize.Large;\r\n  @Input() clear: boolean = true;\r\n  @Input() placeholder: string = 'Enter content';\r\n  @Input() autocomplete: 'on' | 'off' = 'off';\r\n  @Input() autofocus: boolean = false;\r\n  @Input() errorMessages?: Record<string, string>;\r\n  @Input() type: InputType = InputType.Text;\r\n  @Input() prefix?: TemplateRef<void> | null;\r\n  @Input() suffix?: TemplateRef<void> | null;\r\n  @Input() suffixText?: string;\r\n  @Input() prefixIcon?: string;\r\n  @Input() suffixIcon?: string;\r\n  @Input() extendRight?: TemplateRef<void> | null;\r\n  @Input() extendBottom?: TemplateRef<void> | null;\r\n  @Input() tooltipTpl?: TemplateRef<void> | null;\r\n  @Input() tooltipIcon: string = 'media/icons/outline/alert-information.svg';\r\n  @Input() showTooltip: boolean = false;\r\n  @Input() hint?: string;\r\n  @Input() hintIcon: string = 'media/icons/solid/alert-information.svg';\r\n  @Input() showHintIcon: boolean = false;\r\n  @Input() borderLess: boolean = false;\r\n  @Input() showRequired: boolean = false;\r\n  @Input() iconColorChange: boolean = true;\r\n  @Input() shape: InputShape = InputShape.None;\r\n  @Input() richPlaceholderTpl?: TemplateRef<void> | null;\r\n  @Output() tooltipEvent = new EventEmitter<void>();\r\n\r\n\r\n  @HostBinding('class') get hostClass() {\r\n    return this.initClass();\r\n  }\r\n\r\n  initClass() {\r\n    let classs = ['app-input', this.direction.toString()];\r\n    if (this.size !== InputSize.Medium) classs.push(this.size);\r\n    if (this.shape !== InputShape.None) classs.push('input-' + this.shape);\r\n    if (this.richPlaceholderTpl) classs.push('has-rich-placeholder');\r\n    if (this.borderLess) classs.push('border-less');\r\n    if (this.control.value) classs.push('input-filled');\r\n    return classs.join(' ');\r\n  }\r\n\r\n  isShowClearBtn() {\r\n    return (\r\n      this.clear &&\r\n      this.control?.value &&\r\n      !this.control?.disabled &&\r\n      this.control.dirty\r\n    );\r\n  }\r\n\r\n  clearFn(e: any) {\r\n    this.control?.setValue(null);\r\n  }\r\n\r\n  handleTooltip(e: any) {\r\n    this.tooltipEvent.emit();\r\n    e.stopPropagation();\r\n  }\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "src/app/shared/components/base/input/input.component.html",
      "content": "<ng-template #prefixTpl>\r\n  <div class=\"input-prefix\">\r\n    <div class=\"wrapper\">\r\n      @if (prefixIcon) {\r\n        <app-svg [src]=\"prefixIcon\" [colorChange]=\"iconColorChange\" />\r\n      }\r\n      <ng-container [ngTemplateOutlet]=\"prefix || null\" />\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #suffixTpl>\r\n  <div class=\"input-suffix\">\r\n    <div class=\"wrapper\">\r\n      @if (isShowClearBtn()) {\r\n        <a\r\n          app-button\r\n          [mute]=\"true\"\r\n          class=\"clear-icon\"\r\n          [iconOnly]=\"true\"\r\n          (click)=\"clearFn($event)\"\r\n          [iconColorChange]=\"false\"\r\n          [size]=\"'lg'\"\r\n          [prefixIcon]=\"'media/icons/solid/cancel.svg'\"\r\n        ></a>\r\n      }\r\n      @if (suffixIcon) {\r\n        <app-svg [src]=\"suffixIcon\" [colorChange]=\"iconColorChange\" />\r\n      }\r\n      @if (suffixText) {\r\n        <div>{{ suffixText }}</div>\r\n      }\r\n      <ng-container [ngTemplateOutlet]=\"suffix || null\" />\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n@if (label) {\r\n  <div\r\n    [ngClass]=\"{\r\n      label: true,\r\n      required: required && showRequired,\r\n    }\"\r\n  >\r\n    <ng-template #tooltipDefaultTpl>\r\n      <div class=\"mb-1 body-medium-thick\">This is a tooltip</div>\r\n      <div class=\"body-medium-thin\">\r\n        Tooltips are used to describe or identify an element. In most scenarios,\r\n        tooltips help the user understand the meaning, function or alt-text of\r\n        an element.\r\n      </div>\r\n    </ng-template>\r\n    <label class=\"label-inner\" [for]=\"id\">\r\n      {{ label }}\r\n      @if (showTooltip) {\r\n        <app-svg\r\n          class=\"icon-tooltip\"\r\n          [extendClass]=\"'md:size-6'\"\r\n          [size]=\"5\"\r\n          [colorChange]=\"false\"\r\n          nz-tooltip\r\n          [nzTooltipTitle]=\"tooltipTpl || tooltipDefaultTpl\"\r\n          [src]=\"tooltipIcon\"\r\n          (click)=\"handleTooltip($event)\"\r\n        />\r\n      }\r\n    </label>\r\n  </div>\r\n}\r\n<div class=\"app-root\">\r\n  <div class=\"app-root-main\">\r\n    <div\r\n      [ngClass]=\"{\r\n        'input-wrapper': true,\r\n        'input-wrapper-disabled': control.disabled,\r\n      }\"\r\n      [class]=\"size !== 'default' ? ' input-wrapper-' + size : ' '\"\r\n    >\r\n      @if (prefix || prefixIcon) {\r\n        <ng-container [ngTemplateOutlet]=\"prefixTpl\" />\r\n      }\r\n\r\n      <input\r\n        [id]=\"id\"\r\n        [type]=\"type\"\r\n        class=\"input\"\r\n        [class.disabled]=\"control.disabled\"\r\n        [formControl]=\"control\"\r\n        [placeholder]=\"placeholder\"\r\n        [autocomplete]=\"autocomplete\"\r\n        [autofocus]=\"autofocus\"\r\n        aria-label=\"input\"\r\n      />\r\n\r\n      @if (suffix || suffixText || suffixIcon || isShowClearBtn()) {\r\n        <ng-container [ngTemplateOutlet]=\"suffixTpl\" />\r\n      }\r\n      @if (richPlaceholderTpl) {\r\n        <div class=\"input-rich-placeholder\">\r\n          <ng-container [ngTemplateOutlet]=\"richPlaceholderTpl || null\" />\r\n        </div>\r\n      }\r\n\r\n      <div class=\"frame\"></div>\r\n    </div>\r\n    @if (extendRight) {\r\n      <div class=\"extend-right\">\r\n        <ng-container [ngTemplateOutlet]=\"extendRight\" />\r\n      </div>\r\n    }\r\n  </div>\r\n  @if ((control.invalid && control.touched) || hint || extendBottom) {\r\n    <div class=\"explain\">\r\n      @if (hint && !(control.invalid && control.touched)) {\r\n        <div class=\"hint\">\r\n          @if (showHintIcon) {\r\n            <app-svg [size]=\"5\" class=\"hint-icon\" [src]=\"hintIcon\" />\r\n          }\r\n          <p>{{ hint }}</p>\r\n        </div>\r\n      }\r\n      @if (extendBottom) {\r\n        <ng-container [ngTemplateOutlet]=\"extendBottom\" />\r\n      }\r\n      @if (control.invalid && control.touched) {\r\n        <app-validate-error\r\n          [errors]=\"control.errors\"\r\n          [errorMessages]=\"errorMessages\"\r\n        />\r\n      }\r\n    </div>\r\n  }\r\n</div>\r\n",
      "type": "registry:component"
    },
    {
      "path": "src/app/shared/components/base/input/input.component.scss",
      "content": "@import \"mixin\";\r\n\r\n$pxInput: 12px;\r\n//name, wraperRadius, height, $pxInput, btnSize\r\n$InputSizeConfig:\r\n  (\r\n    \"\",\r\n    var(--br-radius-input-md),\r\n    var(--height-input-md),\r\n    var(--px-input-md),\r\n    32px\r\n  ),\r\n  (\r\n    \"-small\",\r\n    var(--br-radius-input-sm),\r\n    var(--height-input-sm),\r\n    var(--px-input-sm),\r\n    28px\r\n  ),\r\n  (\r\n    \"-large\",\r\n    var(--br-radius-input-lg),\r\n    var(--height-input-lg),\r\n    var(--px-input-lg),\r\n    var(--height-input-md)\r\n  );\r\n\r\n@function pyInput($height, $lineHeight) {\r\n  @return calc(($height - $lineHeight) / 2);\r\n}\r\n\r\n.input {\r\n  @apply bg-transparent rounded-md z-[2] text-body-large-semibold;\r\n  grid-column: 2/3;\r\n  grid-row: 2;\r\n\r\n  &,\r\n  &:focus {\r\n    border: none;\r\n    outline: none;\r\n    box-shadow: none;\r\n    -webkit-appearance: none;\r\n    appearance: none;\r\n  }\r\n\r\n  &:disabled {\r\n    // @apply text-text-disable;\r\n  }\r\n\r\n  &-prefix,\r\n  &-suffix {\r\n    z-index: 2;\r\n    grid-row: 2;\r\n    @apply flex items-center;\r\n    .wrapper {\r\n      @apply flex items-center gap-2;\r\n    }\r\n  }\r\n\r\n  &-prefix {\r\n    grid-column: 1;\r\n  }\r\n  &-prefix ~ .input {\r\n    padding-left: 12px !important;\r\n  }\r\n\r\n  &-suffix {\r\n    grid-column: 4;\r\n  }\r\n\r\n  &-wrapper {\r\n    border-radius: var(--frame-radius);\r\n    -ms-grid-columns: auto minmax(0, 1fr) auto;\r\n    grid-template-columns: auto minmax(0, 1fr) auto;\r\n\r\n    @apply bg-transparent grid flex-auto min-w-0;\r\n\r\n    &-disabled {\r\n      @apply cursor-not-allowed;\r\n\r\n      .input {\r\n        @apply cursor-not-allowed;\r\n      }\r\n\r\n      &.input-wrapper .frame {\r\n        @include inputStyleDisabled;\r\n      }\r\n    }\r\n\r\n    .frame {\r\n      @apply border pointer-events-none z-0 transition-all;\r\n      border-radius: var(--frame-radius);\r\n      grid-column: 1/5;\r\n      grid-row: 2;\r\n      @include inputStyle;\r\n    }\r\n\r\n    &:not(.input-wrapper-disabled, .input-wrapper-borderless) {\r\n      &:hover .frame {\r\n        @include inputStyleHover;\r\n      }\r\n\r\n      .input:focus ~ .frame {\r\n        @include inputStyleFocus;\r\n      }\r\n\r\n      .input.ng-invalid.ng-touched {\r\n        ~ .frame {\r\n          @include inputStyleError;\r\n        }\r\n\r\n        &:focus ~ .frame {\r\n          @include inputStyleErrorFocus;\r\n        }\r\n      }\r\n    }\r\n\r\n    @each $name, $wraperRadius, $height, $pxInput, $btnSize in $InputSizeConfig\r\n    {\r\n      &.input-wrapper#{$name} {\r\n        &,\r\n        .frame {\r\n          --frame-radius: #{$wraperRadius};\r\n        }\r\n\r\n        .input-prefix {\r\n          margin-left: $pxInput;\r\n        }\r\n\r\n        .input-suffix {\r\n          margin-right: $pxInput;\r\n        }\r\n\r\n        .input {\r\n          padding: pyInput($height, 24px) $pxInput;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n::placeholder {\r\n  // @apply text-body-large;\r\n  opacity: 1;\r\n}\r\n:host {\r\n  &.app-input {\r\n    @apply w-full;\r\n  }\r\n  &.border-less .frame {\r\n    border: none;\r\n  }\r\n\r\n  &.input-around .input-wrapper .frame {\r\n    --frame-radius: 999px;\r\n  }\r\n}\r\n\r\n.input-rich-placeholder {\r\n  @apply text-body-large-semibold text-text-textneutraltertiary pl-3 flex items-center;\r\n  grid-column: 2/3;\r\n  grid-row: 2;\r\n  pointer-events: none;\r\n}\r\n\r\n.input-wrapper {\r\n  @apply relative;\r\n}\r\n\r\n.input {\r\n  &:not(:placeholder-shown) {\r\n    ~ .input-rich-placeholder {\r\n      opacity: 0;\r\n    }\r\n  }\r\n}\r\n\r\n:host.has-rich-placeholder {\r\n  ::ng-deep {\r\n    .input {\r\n      &::placeholder {\r\n        opacity: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}