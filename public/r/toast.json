{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toast",
  "type": "registry:component",
  "author": "anhnd13",
  "dependencies": [
    "ng-zorro-antd"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/app/shared/components/base/toast/toast.component.ts",
      "content": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  DestroyRef,\r\n  inject,\r\n  Input,\r\n  OnInit,\r\n  TemplateRef,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\r\nimport { SvgInlineComponent } from '@components/base/svg-inline/svg-inline.component';\r\nimport { TOAST_DURATION } from '@enums/ui.enum';\r\nimport { ToastService } from '@services/toast/toast.service';\r\nimport {\r\n  NzNotificationDataOptions,\r\n  NzNotificationService,\r\n} from 'ng-zorro-antd/notification';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-toast',\r\n  standalone: true,\r\n  imports: [CommonModule, SvgInlineComponent],\r\n  templateUrl: './toast.component.html',\r\n  styleUrls: ['./toast.component.scss'],\r\n})\r\nexport class ToastComponent implements OnInit {\r\n  @Input() data!: any;\r\n\r\n  @ViewChild('toastTpl', { static: false }) toastTpl!: TemplateRef<any>;\r\n  @ViewChild('closeTpl', { static: false }) closeTpl!: TemplateRef<any>;\r\n\r\n  private nzNotificationService = inject(NzNotificationService);\r\n  private toastService = inject(ToastService);\r\n  private destroyRef = inject(DestroyRef);\r\n\r\n  private toast$!: Observable<any>;\r\n\r\n  ngOnInit() {\r\n    this.toast$ = this.toastService.getToast();\r\n    this.toast$\r\n      .pipe(takeUntilDestroyed(this.destroyRef))\r\n      .subscribe((param: any) => {\r\n        const toastConfig: NzNotificationDataOptions = {\r\n          nzData: param,\r\n          nzDuration: param.duration || TOAST_DURATION,\r\n          nzPlacement: param.placement || 'topRight',\r\n          nzClass: param.class || '' + ' toast-type-' + param.type,\r\n          nzCloseIcon: this.closeTpl,\r\n          nzAnimate: true,\r\n        };\r\n        this.nzNotificationService.template(this.toastTpl, toastConfig);\r\n      });\r\n  }\r\n\r\n  closeToast() {\r\n    this.nzNotificationService.remove();\r\n  }\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "src/app/shared/components/base/toast/toast.component.html",
      "content": "<ng-template #toastTpl let-data=\"data\">\r\n  <div class=\"wrapper\">\r\n    <app-svg\r\n      [src]=\"data.icon\"\r\n      [colorChange]=\"false\"\r\n      [extendClass]=\"'ant-notification-icon'\"\r\n    />\r\n    <div class=\"content-wrapper\">\r\n      <div class=\"title\">{{ data.title }}</div>\r\n      @if(data.message) {\r\n      <div class=\"message\">\r\n        <ng-container [ngTemplateOutlet]=\"data.message\" />\r\n      </div>\r\n      }\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #closeTpl>\r\n  <app-svg class=\"text-text-textneutralsecondary\" [src]=\"'media/icons/outline/close.svg'\" />\r\n</ng-template>\r\n",
      "type": "registry:component"
    },
    {
      "path": "src/app/shared/components/base/toast/toast.component.scss",
      "content": "::ng-deep {\r\n  .ant-notification {\r\n    &-notice {\r\n      @apply flex items-start rounded-xl p-3 w-[342px] max-w-[calc(100vw-16px*2)] shadow-shadow-xl text-body-medium-regular;\r\n\r\n      &-close {\r\n        @apply flex items-start static;\r\n\r\n        &:hover {\r\n          // @apply text-text-base;\r\n        }\r\n\r\n        &-x {\r\n          @apply flex;\r\n        }\r\n      }\r\n\r\n      .wrapper {\r\n        @apply flex flex-auto items-center gap-2 pr-2;\r\n\r\n        .content-wrapper {\r\n          @apply flex-auto;\r\n\r\n          .title {\r\n            // @apply text-body-large;\r\n          }\r\n        }\r\n      }\r\n\r\n      &.toast-type {\r\n        &-info {\r\n          @apply bg-background-backgroundinfosecondary;\r\n        }\r\n\r\n        &-success {\r\n          @apply bg-background-backgroundsuccesssecondary;\r\n        }\r\n\r\n        &-warning {\r\n          @apply bg-background-backgroundwarningsecondary;\r\n        }\r\n\r\n        &-danger {\r\n          @apply bg-background-backgrounderrorsecondary;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}