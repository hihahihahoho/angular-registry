{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "money-input",
  "type": "registry:component",
  "author": "anhnd13",
  "dependencies": [
    "ng-zorro-antd"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/app/shared/components/base/money-input/money-input.component.ts",
      "content": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  HostBinding,\r\n  inject,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  TemplateRef,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { BaseCVADirective } from '@directives/base-cva/base-cva.directive';\r\nimport { CCY } from '@enums/ccy.enum';\r\nimport { Language } from '@enums/common.enum';\r\nimport { AnySafeType } from '@enums/type.enum';\r\nimport { Direction, InputSize } from '@enums/ui.enum';\r\nimport { CapitalizeFirstCharPipe } from '@pipes/capitalize-first-char/capitalize-first-char.pipe';\r\nimport { NumberToTextPipe } from '@pipes/number-to-text/number-to-text.pipe';\r\nimport { TranslationService } from '@services/translation/translation.service';\r\nimport { UI } from '@services/ui/ui.service';\r\nimport { CleaveOptions } from 'cleave.js/options';\r\nimport { NzDropDownModule } from 'ng-zorro-antd/dropdown';\r\nimport { NzToolTipModule } from 'ng-zorro-antd/tooltip';\r\nimport { NgxCleaveDirectiveModule } from 'ngx-cleave-directive';\r\nimport { Observable } from 'rxjs';\r\nimport { ButtonComponent } from '../button/button.component';\r\nimport { SvgInlineComponent } from '../svg-inline/svg-inline.component';\r\nimport { ValidateErrorComponent } from '../validate-error/validate-error.component';\r\n\r\n@Component({\r\n  selector: 'app-input-money',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    NzToolTipModule,\r\n    NzDropDownModule,\r\n    NgxCleaveDirectiveModule,\r\n    CapitalizeFirstCharPipe,\r\n    NumberToTextPipe,\r\n    ButtonComponent,\r\n    ValidateErrorComponent,\r\n    SvgInlineComponent\r\n  ],\r\n  templateUrl: './money-input.component.html',\r\n  styleUrls: ['../input/input.component.scss', './money-input.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MoneyInputComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class MoneyInputComponent<T>\r\n  extends BaseCVADirective<T>\r\n  implements OnChanges {\r\n  @HostBinding('class') get hostClass() {\r\n    return this.initClass();\r\n  }\r\n  @Input() id: string =\r\n    'input-money' +\r\n    Math.random().toString(22).substring(2) +\r\n    new Date().getTime().toString(22);\r\n  @Input() label?: string | TemplateRef<T>;\r\n  @Input() direction: Direction = Direction.Horizontal;\r\n  @Input() size: InputSize = InputSize.Large;\r\n  @Input() allowClear = true;\r\n  @Input() placeholder = 'Placeholder';\r\n  @Input() prefix?: TemplateRef<void> | null;\r\n  @Input() prefixIcon?: string;\r\n  @Input() suffix?: string;\r\n  @Input() suffixTpl?: TemplateRef<void> | null;\r\n  @Input() suffixIcon?: string;\r\n  @Input() extendRight?: TemplateRef<void> | null;\r\n  @Input() extendBottom?: TemplateRef<void> | null;\r\n  @Input() iconColorChange: boolean = false;\r\n  /**\r\n   * Hiện tooltip\r\n   **/\r\n  @Input() showTooltip: boolean = false;\r\n  @Input() tooltipTpl?: TemplateRef<void> | null;\r\n  @Input() tooltipIcon: string = 'media/icons/outline/alert-information.svg';\r\n  /**\r\n   * Hiện numbertotex\r\n   **/\r\n  @Input() numberToText: boolean = true;\r\n  /**\r\n   * Dạng rút gọn (không có numbertotext)\r\n   **/\r\n  @Input() isSimple: boolean = true;\r\n  /**\r\n   * Hiện dấu hoa thị biểu thị required\r\n   **/\r\n  @Input() showRequired: boolean = false;\r\n  /**\r\n   * Chỉ cho phép nhận số dương\r\n   **/\r\n  @Input() numberPositiveOnly: boolean = true;\r\n  /**\r\n   * Độ dài tối đa, không kể kí tự phân tách (delimiter) và phần thập phân)\r\n   **/\r\n  @Input() maxLength: number = 18;\r\n  /**\r\n   * Cho phép nhận số thập phân\r\n   **/\r\n  @Input() allowDecimal: boolean = false;\r\n  /**\r\n   * Số chữ số thập phân (số chữ số sau dấu chấm)\r\n   **/\r\n  @Input() decimalLength: number = 2;\r\n  /**\r\n   * Kí tự phân tách cụm 3 số\r\n   **/\r\n  @Input() delimiter: string = ',';\r\n  /**\r\n   * Loại tiền tệ\r\n   **/\r\n  @Input() ccy?: CCY = CCY.VND;\r\n  /**\r\n   * Thay đổi loại tiền tệ\r\n   **/\r\n  @Input() changeCCY?: boolean = false;\r\n  /**\r\n   * Mảng loại tiền tệ\r\n   **/\r\n  @Input() ccys = [\r\n    {\r\n      label: 'VND',\r\n      value: 'VND',\r\n    },\r\n    {\r\n      label: 'USD',\r\n      value: 'USD',\r\n    },\r\n    {\r\n      label: 'CAD',\r\n      value: 'CAD',\r\n    },\r\n  ];\r\n  /**\r\n   * Danh sách message lỗi tương ứng\r\n   **/\r\n  @Input() errorMessages?: Record<string, string>;\r\n  /**\r\n   * Gợi ý\r\n   **/\r\n  @Input() hint?: string;\r\n\r\n  @Output() tooltipEvent = new EventEmitter<void>();\r\n  @Output() ccyChangeEvent = new EventEmitter<void>();\r\n\r\n  @ViewChild('moneyInput', { static: false }) moneyInput!: ElementRef;\r\n\r\n  private translationService = inject(TranslationService);\r\n  readonly UI = inject(UI);\r\n  rawValue!: AnySafeType;\r\n  language$!: Observable<Language>;\r\n\r\n  visibleChangeCCYDropdown: boolean = false;\r\n\r\n  cleaveOptions: CleaveOptions = {\r\n    numeral: true,\r\n    numeralThousandsGroupStyle: 'thousand',\r\n    numeralIntegerScale: this.maxLength,\r\n    delimiter: this.delimiter,\r\n    numeralPositiveOnly: this.numberPositiveOnly,\r\n    numeralDecimalScale: this.allowDecimal ? this.decimalLength : 0,\r\n    onValueChanged: (target: AnySafeType) => {\r\n      if (target.target.rawValue > 0) {\r\n        this.rawValue = target.target.rawValue;\r\n        this._onChange(this.rawValue);\r\n      } else {\r\n        this.rawValue = null;\r\n        this._onChange(null);\r\n        this.moneyInput.nativeElement.value = '';\r\n      }\r\n\r\n    },\r\n  };\r\n\r\n  ngOnChanges(): void {\r\n    this.language$ = this.translationService.getLang();\r\n  }\r\n\r\n  initClass() {\r\n\r\n    return `app-input-money ${this.direction}\r\n    ${this.size !== InputSize.Medium ? this.size : ''}\r\n    ${this.control.value && ' input-filled'}\r\n    `.trim();\r\n\r\n  }\r\n\r\n  handleSetValue(value: AnySafeType) {\r\n    this.handleChangeValue(value);\r\n  }\r\n\r\n  onClearInput() {\r\n    this.handleChangeValue(null);\r\n  }\r\n\r\n  handleChangeValue(value: AnySafeType) {\r\n    this.control.patchValue(value);\r\n    const event = new Event('input', { bubbles: true });\r\n    this.moneyInput.nativeElement.dispatchEvent(event);\r\n    this._onTouched;\r\n  }\r\n\r\n  isShowClearBtn() {\r\n    return (\r\n      this.control.value &&\r\n      this.allowClear &&\r\n      !this.control.disabled &&\r\n      this.control.dirty &&\r\n      this.control.touched\r\n    );\r\n  }\r\n\r\n  handleTooltip(e: any) {\r\n    this.tooltipEvent.emit();\r\n    e.stopPropagation();\r\n  }\r\n\r\n  handleSelectCCY(item: any) {\r\n    this.ccy = item.value;\r\n    this.ccyChangeEvent.emit(item);\r\n  }\r\n\r\n  visibleChangeDropdownCCY(visible: boolean) {\r\n    console.log('haha:', visible);\r\n    this.visibleChangeCCYDropdown = visible;\r\n  }\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "src/app/shared/components/base/money-input/money-input.component.html",
      "content": "<ng-template #prefixTpl>\r\n  <div class=\"input-prefix\">\r\n    <div class=\"wrapper\">\r\n      <app-svg\r\n        [src]=\"prefixIcon\"\r\n        *ngIf=\"prefixIcon\"\r\n        [colorChange]=\"iconColorChange\"\r\n      />\r\n      <ng-container [ngTemplateOutlet]=\"prefix || null\" />\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #suffixFullTpl>\r\n  <div\r\n    class=\"input-suffix\"\r\n    *ngIf=\"\r\n      suffix || suffixIcon || suffixTpl || changeCCY || ccy || isShowClearBtn()\r\n    \"\r\n  >\r\n    <div class=\"wrapper\">\r\n      <a\r\n        app-button\r\n        *ngIf=\"isShowClearBtn()\"\r\n        [mute]=\"true\"\r\n        class=\"clear-icon\"\r\n        [iconOnly]=\"true\"\r\n        (click)=\"onClearInput()\"\r\n        [iconColorChange]=\"false\"\r\n        [size]=\"'lg'\"\r\n        [prefixIcon]=\"'media/icons/solid/cancel.svg'\"\r\n      ></a>\r\n\r\n      <div\r\n        class=\"text-body-large-semibold text-brand-brandprimary100\"\r\n        *ngIf=\"ccy\"\r\n      >\r\n        {{ ccy }}\r\n      </div>\r\n\r\n      <app-svg\r\n        *ngIf=\"suffixIcon\"\r\n        [src]=\"suffixIcon\"\r\n        [colorChange]=\"iconColorChange\"\r\n      />\r\n\r\n      <div *ngIf=\"suffix\">{{ suffix }}</div>\r\n\r\n      <ng-container [ngTemplateOutlet]=\"suffixTpl || null\" />\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #tooltipDefaultTpl>\r\n  <div class=\"text-title-sm\">Hạn mức giao dịch</div>\r\n</ng-template>\r\n\r\n<div\r\n  *ngIf=\"label\"\r\n  [ngClass]=\"{\r\n    label: true,\r\n    required: showRequired,\r\n  }\"\r\n>\r\n  <label class=\"label-inner\" [for]=\"id\">\r\n    {{ label }}\r\n    @if (showTooltip) {\r\n      <button\r\n        app-button\r\n        type=\"button\"\r\n        aria-label=\"icon tooltip\"\r\n        class=\"icon-tooltip\"\r\n        [prefixIcon]=\"tooltipIcon\"\r\n        [color]=\"UI.ButtonColor.LinkPrimary\"\r\n        [iconOnly]=\"true\"\r\n        [mute]=\"true\"\r\n        nz-tooltip\r\n        [nzTooltipTitle]=\"tooltipTpl || tooltipDefaultTpl\"\r\n        (click)=\"handleTooltip($event)\"\r\n      ></button>\r\n    }\r\n  </label>\r\n</div>\r\n\r\n<div class=\"app-root\">\r\n  <div class=\"app-root-main\">\r\n    <div\r\n      [ngClass]=\"{\r\n        'input-wrapper': true,\r\n        'input-money-wrapper': true,\r\n        'input-simple-wrapper': isSimple,\r\n        'input-wrapper-disabled': control.disabled,\r\n      }\"\r\n      [class]=\"size !== 'default' ? ' input-wrapper-' + size : ' '\"\r\n    >\r\n      <ng-container\r\n        *ngIf=\"prefix || prefixIcon\"\r\n        [ngTemplateOutlet]=\"prefixTpl\"\r\n      />\r\n\r\n      <input\r\n        #moneyInput\r\n        [id]=\"id\"\r\n        type=\"text\"\r\n        [ngClass]=\"{\r\n          input: true,\r\n          'input-money-input': true,\r\n          'input-empty': !control.value,\r\n          'input-not-to-text': !numberToText && !isSimple,\r\n          disabled: control.disabled,\r\n        }\"\r\n        [formControl]=\"control\"\r\n        [placeholder]=\"placeholder\"\r\n        aria-label=\"input money\"\r\n        [cleave]=\"cleaveOptions\"\r\n      />\r\n\r\n      <ng-container [ngTemplateOutlet]=\"suffixFullTpl\" />\r\n\r\n      <div class=\"frame\"></div>\r\n    </div>\r\n\r\n    @if (extendRight) {\r\n      <div class=\"extend-right\">\r\n        <ng-container [ngTemplateOutlet]=\"extendRight\" />\r\n      </div>\r\n    }\r\n  </div>\r\n  @if (\r\n    (control.invalid && control.touched) || hint || extendBottom || numberToText\r\n  ) {\r\n    <div class=\"explain\">\r\n      <ng-container *ngIf=\"language$ | async as lang\">\r\n        <div\r\n          *ngIf=\"control.value && numberToText\"\r\n          class=\"text-text-textneutralsecondary text-body-medium-pominent\"\r\n        >\r\n          {{ rawValue | numberToText: ccy : lang | capitalizeFirstChar }}\r\n        </div>\r\n      </ng-container>\r\n      @if (control.invalid && control.touched) {\r\n        <app-validate-error\r\n          [errors]=\"control.errors\"\r\n          [errorMessages]=\"errorMessages\"\r\n        />\r\n      }\r\n      @if (hint) {\r\n        <div class=\"hint\">\r\n          {{ hint }}\r\n        </div>\r\n      }\r\n      @if (extendBottom) {\r\n        <ng-container [ngTemplateOutlet]=\"extendBottom\" />\r\n      }\r\n    </div>\r\n  }\r\n</div>\r\n",
      "type": "registry:component"
    },
    {
      "path": "src/app/shared/components/base/money-input/money-input.component.scss",
      "content": ".input-money {\r\n  &-wrapper {\r\n    .input {\r\n      grid-row: 1;\r\n    }\r\n\r\n    &:not(.input-simple-wrapper) {\r\n      .input {\r\n\r\n        &:not(.input-empty, .input-not-to-text) {\r\n          @apply mt-3 mb-1;\r\n        }\r\n\r\n        &:not(.input-not-suggest) {\r\n          @apply py-0;\r\n        }\r\n\r\n        &.input-not-suggest {\r\n          &.input-empty {\r\n            line-height: 24px;\r\n          }\r\n\r\n          &:not(.input-empty) {\r\n            @apply py-0;\r\n          }\r\n        }\r\n\r\n        &.input-empty,\r\n        &.input-not-to-text {\r\n          &:not(.input-not-suggest) {\r\n            line-height: var(--height-inputmoney);\r\n          }\r\n        }\r\n\r\n        &::placeholder {\r\n          @apply font-normal;\r\n        }\r\n      }\r\n    }\r\n\r\n    .input-prefix,\r\n    .input-suffix {\r\n      grid-row: 1/3;\r\n    }\r\n\r\n    .to-text {\r\n      grid-column: 2 / 3;\r\n      grid-row: 2;\r\n      @apply px-4 pb-[10px] z-[2];\r\n    }\r\n\r\n    .input-prefix ~ .to-text {\r\n      @apply pl-3;\r\n    }\r\n\r\n    .frame {\r\n      grid-column: 1 / 5;\r\n      grid-row: 1 / 3;\r\n    }\r\n\r\n    .change-ccy {\r\n      &-wrap {\r\n        @apply flex pr-3 -mr-4 h-10;\r\n      }\r\n\r\n      &-inner {\r\n        @apply flex gap-2 items-center cursor-pointer;\r\n        .ccy {\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.suggests {\r\n  @apply mt-2;\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}